#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Apr 14 16:02:45 2022

@author: aixuexi
"""
import math
import pickle
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from matplotlib import rcParams
from tqdm import tqdm
from EmpiricalData import ExtractFilteredFoS


threshold = ExtractFilteredFoS.filter_threshold
i_list = ['0.0', '0.1', '0.2', '0.3'] + list(np.arange(1, 11))

#%%
# 时间衰减函数
def inverse_function_curve(X):
    # t: 当前时刻, t0: 起始时刻
    X = X + 1
    tdv = 1 / X
    return tdv

def inverse_coth_curve(X, temperature):
    # 温度, 避免指数爆炸, 协调下降率
    X = X / temperature
    
    a = np.exp(X) 
    b = np.exp(-X)
    tanh = (a - b) / (a + b) # math.tanh(X)
    # coth = 1 / tanh          # math.coth(X)

    tdv = -tanh + 1
    return tdv

def sigmoid_curve(X, temperature):
    X = X / temperature
    return 2 * (1 - 1 / (1 + np.exp(-X)))

def plot_time_decay():
    
    T = 100
    X = np.arange(0, T)
    Y = inverse_function_curve(X)
    plt.plot(X, Y, label='inverse')
    
    # 温度参数: 控制衰减速率
    temperature = 10
    
    X = np.arange(0, T)
    Y = inverse_coth_curve(X, temperature)
    plt.plot(X, Y, label='tanh')
    
    X = np.arange(0, T)
    Y = sigmoid_curve(X, temperature)
    plt.plot(X, Y, label='logistic')
    
    plt.legend(frameon=False)
    
#%%
# 确定 temperature 参数
def calculate_t_gap():
    # year - fos_born_year 分布 (样本数目为文章数目)   ---> pid2fos_t_gap
    # year - bifos_born_year 分布 (样本数目为文章数目) ---> pid2bifos_t_gap

    # 获取fos 和 bifos元组的出生年份
    filterfos2bornyear, _, filterbifos2bornyear = FoSFilter.fos_born_year_data(threshold)
    
    pid_duplicate_dict = dict()
    pid2fos_t_gap   = list()
    pid2bifos_t_gap = list()
    for i in i_list:
        aid2fosidx = FoSFilter.filter_fos_data(filterfos2bornyear, i)  # 作者每篇文章的 fos_list
        # 统计新颖性    
        for aid in tqdm(aid2fosidx):
            for year in aid2fosidx[aid]:
                if year == '':
                    continue
                for pid, fos_list in aid2fosidx[aid][year]:
                     if pid not in pid_duplicate_dict:
                         pid_duplicate_dict[pid] = 0
                     else:
                         continue
                     # 排序 --- 保证组合命名唯一
                     fos_list = list(set(fos_list))
                     fos_list = [int(fos) for fos in fos_list]
                     fos_list = list(sorted(fos_list))
                     fos_list = [str(fos) for fos in fos_list]
                     # 
                     if len(fos_list) != 0:
                         y_list = list()
                         for fos in fos_list:
                             fos_bornyear = filterfos2bornyear[int(fos)]
                             fos_t_gap  = year - fos_bornyear
                             pid2fos_t_gap.append(fos_t_gap)
                    # 
                     if len(fos_list) > 1:
                        # C_n^2
                        for fos_i_index, fos_i in enumerate(fos_list):
                            for fos_j_index, fos_j in enumerate(fos_list[fos_i_index+1:]):
                                bi_fos_name = ",".join([fos_i, fos_j])
                                # bifos的出生年份
                                bifos_bornyear = filterbifos2bornyear[bi_fos_name]
                                bifos_t_gap  = year - bifos_bornyear
                                pid2bifos_t_gap.append(bifos_t_gap)
    # 
    with open("./FoSData/pid2fos_t_gap.pkl", 'wb') as f:
        pickle.dump(pid2fos_t_gap, f)
    with open("./FoSData/pid2bifos_t_gap.pkl", 'wb') as f:
        pickle.dump(pid2bifos_t_gap, f)

def plot_t_gap_dis():
    
    with open("./FoSData/pid2fos_t_gap.pkl", 'rb') as f:
        pid2fos_t_gap = pickle.load(f)
    with open("./FoSData/pid2bifos_t_gap.pkl", 'rb') as f:
        pid2bifos_t_gap = pickle.load(f)
    
    # 过滤 < 0 (由于bornyear是根据采纳频率超过阈值确定导致)
    A, B = list(), list()
    for a in tqdm(pid2fos_t_gap):
        if a > 0:
            A.append(a)
    for b in tqdm(pid2bifos_t_gap):
        if b > 0:
            B.append(b)
    A = np.array(A)
    B = np.array(B)
    del pid2fos_t_gap, pid2bifos_t_gap
    
    # (1) 绘图 --- t-gap
    fig = plt.figure(figsize=(8, 6))
    plt.rcParams['savefig.dpi'] = 300
    plt.rcParams['figure.dpi'] = 300
    config = {
              "font.family" : "SimHei",
              "font.size" : 22
              }
    rcParams.update(config)
    c = 'red'
    bins = 30
    sns.distplot(A, bins = bins, kde = True, norm_hist=True,
                 hist_kws = {'color':c}, 
                 kde_kws = {'color':c, 'linestyle':'--', 'linewidth':3},
                 label = 'fos时间间隔')
    plt.legend(frameon=False)
    
    fig = plt.figure(figsize=(8, 6))
    plt.rcParams['savefig.dpi'] = 300
    plt.rcParams['figure.dpi'] = 300
    config = {
              "font.family" : "SimHei",
              "font.size" : 22
              }
    rcParams.update(config)
    c = 'blue'
    bins = 30
    sns.distplot(B, bins = bins, kde = True, norm_hist=True,
                 hist_kws = {'color':c}, 
                 kde_kws = {'color':c, 'linestyle':'--', 'linewidth':3},
                 label = 'bifos时间间隔')
    plt.legend(frameon=False)
    
    # (2) 绘图 --- 1 / (t - t0 + 1)
    fig = plt.figure(figsize=(8, 6))
    plt.rcParams['savefig.dpi'] = 300
    plt.rcParams['figure.dpi'] = 300
    config = {
              "font.family" : "SimHei",
              "font.size" : 22
              }
    rcParams.update(config)
    c = 'red'
    bins = 25
    sns.distplot(1 / (A + 1), bins = bins, kde = True, norm_hist=True,
                 hist_kws = {'color':c}, 
                 kde_kws = {'color':c, 'linestyle':'--', 'linewidth':3},
                 label = '1/(t-t0+1)')
    plt.legend(frameon=False)
    
    fig = plt.figure(figsize=(8, 6))
    plt.rcParams['savefig.dpi'] = 300
    plt.rcParams['figure.dpi'] = 300
    config = {
              "font.family" : "SimHei",
              "font.size" : 22
              }
    rcParams.update(config)
    c = 'blue'
    bins = 25
    sns.distplot(1 / (B + 1), bins = bins, kde = True, norm_hist=True,
                 hist_kws = {'color':c}, 
                 kde_kws = {'color':c, 'linestyle':'--', 'linewidth':3},
                 label = '1/(t-t0+1)')
    plt.legend(frameon=False)
    
    # (3) 绘图 --- 调整temperature参数, 使经过sigmoid变换后, 服从 uniform distribution
    temperature = 20
    A_prime = sigmoid_curve(A, temperature)
    B_prime = sigmoid_curve(B, temperature)
    
    fig = plt.figure(figsize=(8, 6))
    plt.rcParams['savefig.dpi'] = 300
    plt.rcParams['figure.dpi'] = 300
    config = {
              "font.family" : "SimHei",
              "font.size" : 22
              }
    rcParams.update(config)
    c = 'red'
    bins = 25
    sns.distplot(A_prime, bins = bins, kde = True, norm_hist=True,
                 hist_kws = {'color':c}, 
                 kde_kws = {'color':c, 'linestyle':'--', 'linewidth':3},
                 label = 'sigmoid')
    plt.legend(frameon=False)
    
    fig = plt.figure(figsize=(8, 6))
    plt.rcParams['savefig.dpi'] = 300
    plt.rcParams['figure.dpi'] = 300
    config = {
              "font.family" : "SimHei",
              "font.size" : 22
              }
    rcParams.update(config)
    c = 'blue'
    bins = 25
    sns.distplot(B_prime, bins = bins, kde = True, norm_hist=True,
                 hist_kws = {'color':c}, 
                 kde_kws = {'color':c, 'linestyle':'--', 'linewidth':3},
                 label = 'sigmoid')
    plt.legend(frameon=False)
    