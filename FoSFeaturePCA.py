#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Apr 12 09:25:48 2022

@author: aixuexi
"""
import pickle
import os
import numpy as np
import seaborn as sns
import prettytable as pt
import matplotlib.pyplot as plt
from matplotlib import rcParams
from tqdm import tqdm
from sklearn import datasets
from sklearn import decomposition
from scipy import stats
from EmpiricalData import ReadFoSFeature


save_data_path = ReadFoSFeature.save_data_path


def turn_metics_to_array(pid2metrics):
    # get X for pca
    X = list()
    for pid in tqdm(pid2metrics):
        metrics_1, metrics_2 = pid2metrics[pid]
        X.append([metrics_1, metrics_2])
    X = np.array(X)
    return X


def pca_reduce_dim(X, n_components):
    pca = decomposition.PCA(n_components=n_components)
    # 
    pca.fit(X)
    # 各主成分的方差解释力
    print("方差解释力: ", pca.explained_variance_ratio_)
    # 降维
    X_reduce = pca.transform(X)
    
    return X_reduce, pca, pca.explained_variance_ratio_


def plot_dis_after_pca(X_reduce, c='black', label=''):
    # 绘图
    fig = plt.figure(figsize=(8, 8))
    plt.rcParams['savefig.dpi'] = 300
    plt.rcParams['figure.dpi'] = 300
    config = {
              "font.family" : "SimHei",
              "font.size" : 22
              }
    rcParams.update(config)
    
    bins = 50
    
    sns.distplot(X_reduce, bins = bins, kde = False, norm_hist=True,
                  hist_kws = {'color':c, 'rwidth': 0.95}, 
                  kde_kws = {'color':c, 'linestyle':'--', 'linewidth':3},
                  label = '')
    plt.ylabel("密度")
    plt.xlabel(label)
    # plt.yticks(np.arange(0, 0.5, 0.1))
    # plt.xlim(-3, 3)


def calculate_pearsonr(X):
    X1 = X[:, 0]
    X2 = X[:, 1]
    cor, p = stats.pearsonr(X1, X2)
    return cor, p


def Main():
    excp = True   # 计算MS, PS, DS, ES, CS间相关性时应该 False, 避免造成相关性.
                  # excp = False, 异常点舍弃
    
    # (1) fos tuple的多样性程度, 越大多样性越强
    #     pca 后保持 越大多样性越强
    pid2pnasmetrics = ReadFoSFeature.read_pnasmetrics(excp=excp)
    X_DS = turn_metics_to_array(pid2pnasmetrics)
    DS, pca_DS, evr_DS = pca_reduce_dim(X_DS, 1)
    cor_DS, p_DS = calculate_pearsonr(X_DS)
    DS_median = np.median(DS)
    pid2DS = dict()
    for i, pid in enumerate(pid2pnasmetrics):
        pid2DS[pid] = DS[i][0]
        pass
    with open(os.path.join(save_data_path, "pid2DS.pkl"), 'wb') as f:
        pickle.dump(pid2DS, f)
    # 绘图
    # plot_dis_after_pca(DS, c='red', label=r'$\pi_{D}$')
    del pid2pnasmetrics, pid2DS
    
    # (2) fos tuple的流行性程度, 越小流行性越强 (因为take -log)
    #     pca 后保持 越小流行性越强
    pid2popularitymetrics = ReadFoSFeature.read_popmetrics(excp=excp)
    X_PS = turn_metics_to_array(pid2popularitymetrics)
    PS, pca_PS, evr_PS = pca_reduce_dim(X_PS, 1)
    cor_PS, p_PS = calculate_pearsonr(X_PS)
    PS_median= np.median(PS)
    pid2PS = dict()
    for i, pid in enumerate(pid2popularitymetrics):
        pid2PS[pid] = PS[i][0]
        pass
    with open(os.path.join(save_data_path, "pid2PS.pkl"), 'wb') as f:
        pickle.dump(pid2PS, f) 
    # 绘图
    # plot_dis_after_pca(PS, c='green', label=r'$\pi_{P}$')
    del pid2popularitymetrics, pid2PS
    
    # (3) fos tuple的成熟主题利用性程度, 越小 利用性越强 (ML已经take -log)
    #     pca 改变单调性***, 越大利用性越强
    pid2maturemetrics = ReadFoSFeature.read_maturemetrics(excp=excp)
    X_MS = turn_metics_to_array(pid2maturemetrics)
    MS, pca_MS, evr_MS  = pca_reduce_dim(X_MS, 1)   # pca后, 越大利用性越强
    cor_MS, p_MS = calculate_pearsonr(X_MS)
    MS_median = np.median(MS)
    pid2MS = dict()
    for i, pid in enumerate(pid2maturemetrics):
        pid2MS[pid] = MS[i][0]
        pass
    with open(os.path.join(save_data_path, "pid2MS.pkl"), 'wb') as f:
        pickle.dump(pid2MS, f) 
    # 绘图
    # plot_dis_after_pca(MS, c='black', label=r'$\pi_{M}$')
    del pid2maturemetrics, pid2MS
    
    
    # (4) fos tuple的新兴性程度, 越小 新兴性越强 (因为take -log)
    #     pca 后保持越小新颖性越强
    pid2nimetrics = ReadFoSFeature.read_nimetrics(excp=excp)
    X_ES = turn_metics_to_array(pid2nimetrics)
    ES, pca_ES, evr_ES = pca_reduce_dim(X_ES, 1)
    cor_ES, p_ES = calculate_pearsonr(X_ES)
    ES_median = np.median(ES)
    pid2ES = dict()
    for i, pid in enumerate(pid2nimetrics):
        pid2ES[pid] = ES[i][0]
        pass
    with open(os.path.join(save_data_path, "pid2ES.pkl"), 'wb') as f:
        pickle.dump(pid2ES, f) 
    # 绘图
    # plot_dis_after_pca(ES, c='blue', label=r'\pi_{E}') 
    del pid2nimetrics, pid2ES
    
    # (5) fos tuple的组合创新程度, 越小 组合创新越强 (因为take -log)
    #     pca后 保持越小新颖性越强
    pid2cimetrics = ReadFoSFeature.read_cimetrics(excp=excp)
    X_CS = turn_metics_to_array(pid2cimetrics)
    CS, pca_CS, evr_CS = pca_reduce_dim(X_CS, 1)
    cor_CS, p_CS = calculate_pearsonr(X_CS)
    CS_median = np.median(CS)
    pid2CS = dict()
    for i, pid in enumerate(pid2cimetrics):
        pid2CS[pid] = CS[i][0]
        pass
    with open(os.path.join(save_data_path, "pid2CS.pkl"), 'wb') as f:
        pickle.dump(pid2CS, f) 
    # 绘图
    # plot_dis_after_pca(CS, c='black', label=r'$\pi_{C}$')
    del pid2cimetrics, pid2CS

    # (1) 每个策略的内部2个指标间的相关性, PCA解释性方差
    tb = pt.PrettyTable()
    tb.field_names = ["Strategy", "Pearsonr", "Explained var_ratio"]
    tb.add_row([r"$\pi_{M}$", "{:.6f}".format(cor_MS), "{:.6f}".format(evr_MS[0])])
    tb.add_row([r"$\pi_{P}$", "{:.6f}".format(cor_PS), "{:.6f}".format(evr_PS[0])])
    tb.add_row([r"$\pi_{D}$", "{:.6f}".format(cor_DS), "{:.6f}".format(evr_DS[0])])
    tb.add_row([r"$\pi_{E}$", "{:.6f}".format(cor_ES), "{:.6f}".format(evr_ES[0])])
    tb.add_row([r"$\pi_{C}$", "{:.6f}".format(cor_CS), "{:.6f}".format(evr_CS[0])])
    print(tb)

    # 存储
    pca_dict = dict()
    # pnasmetrics
    pca_dict["DS"] = dict()
    pca_dict["DS"]["median"] = DS_median
    pca_dict["DS"]["pca"]    = pca_DS
    pca_dict["DS"]["evr"]    = evr_DS[0]
    # popularitymetrics
    pca_dict["PS"] = dict()
    pca_dict["PS"]["median"] = PS_median
    pca_dict["PS"]["pca"]    = pca_PS
    pca_dict["PS"]["evr"]    = evr_PS[0]
    # matruemetrics
    pca_dict["MS"] = dict()
    pca_dict["MS"]["median"] = MS_median
    pca_dict["MS"]["pca"]    = pca_MS
    pca_dict["MS"]["evr"]    = evr_MS[0]
    # nimetrics
    pca_dict["ES"] = dict()
    pca_dict["ES"]["median"] = ES_median
    pca_dict["ES"]["pca"]    = pca_ES
    pca_dict["ES"]["evr"]    = evr_ES[0]
    # cimetrics
    pca_dict["CS"] = dict()
    pca_dict["CS"]["median"] = CS_median
    pca_dict["CS"]["pca"]    = pca_CS
    pca_dict["CS"]["evr"]    = evr_CS[0]
    # 
    with open(os.path.join(save_data_path, "pca_dict.pkl"), "wb") as f:
        pickle.dump(pca_dict, f)


def read_pca_results(file_name="pca_dict.pkl"):
    with open(os.path.join(save_data_path, file_name), "rb") as f:
         pca_dict = pickle.load(f)
    return pca_dict
    
